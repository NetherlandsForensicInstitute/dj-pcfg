syntax = "proto3";

option java_package = "nl.nfi.djpcfg.guess.cache.distributed";

enum Response {
  OK = 0;
  NOT_FOUND = 1;
  ALREADY_EXISTS = 2;
  IN_USE = 3;
}

message CheckpointMetadata {
  string grammarUuid = 1;
  int64 keyspaceOffset = 2;
}

// TODO: look into using headers for request metadata (except for checkpoint metadata)
message CheckpointRequest {
  string senderName = 1;
  CheckpointMetadata checkpointMetadata = 2;
}

message Chunk {
  bytes data = 1;
}

message StreamMessage {
  oneof part {
    CheckpointRequest request = 1;
    Response response = 2;
    Chunk chunk = 3;
  }
}

message StorageResponse {
  Response response = 1;
}

service CheckpointService {

  /**
   * Request a checkpoint from the server. The request includes the UUID of the PCFG rule which
   * will be used. It will also include the keyspace offset where the client would like to start generating.
   *
   * Server first returns a response. In case of Response.OK, will follow by transferring the checkpoint data.
   *
   * Flow:
   *   - client -> server: CheckpointRequest
   *   - server -> client: StreamMessage<Response>
   *
   *   in case of Response.OK:
   *   - server -> client: StreamMessage<CheckpointRequest>
   *   - server -> client: StreamMessage<Chunk>[]
   */
  rpc getCheckpoint(CheckpointRequest) returns (stream StreamMessage) {}

  /**
   * Request the server for storing a checkpoint. The request includes the UUID of the PCFG rule from which
   * the state was generated. It will also include the keyspace offset of the state after the final guess done
   * by the client.
   *
   * Server first returns a response. In case of Response.OK, client can start transferring the checkpoint data.
   *
   * Flow:
   *   - client -> server: StreamMessage<CheckpointRequest>
   *   - server -> client: StorageResponse
   *
   *   in case of Response.OK:
   *   - client -> server: StreamMessage<Chunk>[]
   */
  rpc storeCheckpoint(stream StreamMessage) returns (stream StorageResponse) {}
}
